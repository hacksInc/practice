<?php
/**
 *	Api/Shop/Purchase.php
 *	商品購入（課金処理）
 *
 *	@author 	{$author}
 *	@package	Pp
 *	@version	$Id$
 */

/**
 *	api_shop_purchase Form implementation.
 *
 *	@author 	{$author}
 *	@access 	public
 *	@package	Pp
 */
class Pp_Form_ApiShopPurchase extends Pp_ApiActionForm
{
	/**
	 *	@access private
	 *	@var	array	form definition.
	 */
	var $form = array(
		'sell_id' => array(
			// Form definition
			'type'        => VAR_TYPE_INT, // Input type

			//  Validator (executes Validator by written order.)
			'required'    => true,            // Required Option(true/false)
			'min'         => 1,               // Minimum value
			'max'         => null,           // Maximum value
		),
		'receipt' => array(
			// Form definition
			'type'        => VAR_TYPE_STRING, // Input type

			//  Validator (executes Validator by written order.)
			'required'    => true,            // Required Option(true/false)
			'min'         => 1,               // Minimum value
			'max'         => 65535,           // Maximum value
		),
		'signature' => array(
			// Form definition
			'type'        => VAR_TYPE_STRING, // Input type

			//  Validator (executes Validator by written order.)
			'required'    => false,            // Required Option(true/false)
			'min'         => 1,               // Minimum value
			'max'         => 65535,           // Maximum value
		),
		'ua' => array(
			// Form definition
			'type'        => VAR_TYPE_INT, // Input type

			//  Validator (executes Validator by written order.)
			'required'    => true,            // Required Option(true/false)
			'min'         => 1,               // Minimum value
			'max'         => 2,           // Maximum value
		),
	);
}

/**
 *	api_shop_purchase action implementation.
 *
 *	@author 	{$author}
 *	@access 	public
 *	@package	Pp
 */
class Pp_Action_ApiShopPurchase extends Pp_ApiActionClass
{
	private $skip = false;
	private $m_sell = null;
	private $receipt_result = null;
	
	/**
	 *	preprocess of api_shop_purchase Action.
	 *
	 *	@access public
	 *	@return string	  forward name(null: success.
	 *								  false: in case you want to exit.)
	 */
	function prepare()
	{
		if( $this->af->validate() > 0 )
		{
			return 'error_400';
		}
		
		// クライアントからの引数を取得
		$pp_id = $this->getAuthenticatedBasicAuth( 'user' );
		
		$sell_id = $this->af->get( "sell_id" );
		$receipt = $this->af->get( "receipt" );
		$signature = $this->af->get( "signature" );
		$ua = $this->af->get( "ua" );
//error_log( $receipt );
		
		$payment_m =& $this->backend->getManager( "Payment" );
		$shop_m =& $this->backend->getManager( "Shop" );
		
		// そもそもショップで取り扱ってなかったらエラー
		// なお、決済完了→サーバー問い合わせに時間がかかる可能性があるので、終了日付をまたぐ可能性がある
		// データ登録のみを見るようにする
		$sell = $shop_m->getMasterSell( $sell_id );
		
		if ( !$sell || Ethna::isError( $sell ) ) {
error_log( "[Purchase]Master Sell Error" );
			return 'error_500';
		}
		
		$this->m_sell = $sell;

		// レシートの検証
		// これは登録済みだろうがなかろうが、必ず行う
		switch ( $ua ) {
			case 1:	// iOS
				$result = $payment_m->validateReceiptiOS( $receipt, $this->m_sell, $receipt_result );
				if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]Receipt Validate(iOS) Error" );
					return 'error_500';
				}
				
				$this->receipt_result = $receipt_result;
				
				// 既に処理済のレシートの場合は実処理をスキップして、配列のみ返す
				// レプリケーション遅延が怖いので、マスターに問い合わせ
				$history = $payment_m->getPaymentHistoryiOS( $receipt_result['receipt']['transaction_id'], "db_cmn" );
				break;
				
			case 2:	// Android
				// Androidはサーバーに接続せず、公開鍵を使ってのSSL証明で行う
				$result = $payment_m->validateReceiptAndroid( base64_decode( $receipt ), $signature );
				if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]Receipt Validate(Android) Error" );
					return 'error_500';
				}
				
				$this->receipt_result = json_decode( base64_decode( $receipt ), 1 );
				
error_log( print_r( $this->receipt_result, 1 ) );
				
				// 既に処理済のレシートの場合は実処理をスキップして、配列のみ返す
				// レプリケーション遅延が怖いので、マスターに問い合わせ
				$history = $payment_m->getPaymentHistoryAndroid( $this->receipt_result['orderId'], "db_cmn" );
				break;
		}
		
		// エラーだったら終了
		if ( Ethna::isError( $history ) ) {
error_log( "[Purchase]Payment History Error" );
			return 'error_500';
		}
		
		if ( isset( $history['receipt'] ) && $history['receipt'] == $receipt ) {	// ハッシュは関数でチェックしてるけど、一応原文もチェック
			$this->skip = true;
		}
		
		return null;
	}

	/**
	 *	api_shop_purchase action implementation.
	 *
	 *	@access public
	 *	@return string	forward name.
	 */
	function perform()
	{
		// クライアントからの引数を取得
		$pp_id = $this->getAuthenticatedBasicAuth( 'user' );
		$api_transaction_id = $this->getApiTransactionId();
		
		$receipt = $this->af->get( "receipt" );
		$signature = $this->af->get( "signature" );
		$ua = $this->af->get( "ua" );
		
		$item_m =& $this->backend->getManager( "Item" );
		$payment_m =& $this->backend->getManager( "Payment" );
		$user_m =& $this->backend->getManager( "User" );
		$logdata_m =& $this->backend->getManager( "Logdata" );
		
		// performに来てるならレシート整合性は確認できているので、レシート情報を登録して所持数を増やす
		// ただしskipがtrueなら重複処理なので、実処理は飛ばす
		if ( !$this->skip ) {
			$user = $user_m->getUserBase( $pp_id );
			$item = $user_m->getUserItem( $pp_id, $this->m_sell['item_id'], "db_r" );
			
			// トランザクション開始
			$db =& $this->backend->getDB();
			$db_cmn =& $this->backend->getDB( "cmn" );
			
			$db->begin();
			$db_cmn->begin();
			
			// レシートを登録
			if ( $ua == 1 )	$result = $payment_m->insertPaymentHistoryiOS( $this->receipt_result['receipt']['transaction_id'], $pp_id, $receipt );
			else			$result = $payment_m->insertPaymentHistoryAndroid( $this->receipt_result['orderId'], $pp_id, $receipt, $signature );
			
			if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]insert receipt Error" );
				$db->rollback();
				$db_cmn->rollback();
				return 'error_500';
			}
			
			// アイテムを増加
			$result = $item_m->updateUserItem( $pp_id, $this->m_sell['item_id'], $this->m_sell['num'] );
			if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]update item Error" );
				$db->rollback();
				$db_cmn->rollback();
				return 'error_500';
			}
			
			// 月額課金額を更新
			$columns = array( "ma_purchase" => $user['ma_purchase'] + $this->m_sell['price'] );
			$result = $user_m->updateUserBase( $pp_id, $columns );
			if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]update user base Error" );
				$db->rollback();
				$db_cmn->rollback();
				return 'error_500';
			}
			
			// アイテム履歴を記録
			$columns = array(
				'pp_id' => $pp_id,
				'api_transaction_id' => $api_transaction_id,
				'item_id' => $this->m_sell['item_id'],
				'processing_type' => 'B03',
				'device_type' => $ua,
				'count' => $this->m_sell['num'],
				'num' => ( $item['num'] + $this->m_sell['num'] ),
				'num_prev' => (( empty( $item )) ? 0 : $item['num'] )
			);
			$result = $logdata_m->logItem( $columns );
			if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]log item Error" );
				$db->rollback();
				$db_cmn->rollback();
				return 'error_500';
			}
			
			// 課金アイテム購入履歴を記録
			$columns = array(
				'pp_id' => $pp_id,
				'api_transaction_id' => $api_transaction_id,
				'sell_id' => $this->m_sell['sell_id'],
				'price' => $this->m_sell['price']
			);
			$result = $logdata_m->logAccounting( $columns );
			if ( !$result || Ethna::isError( $result ) ) {
error_log( "[Purchase]log accounting Error" );
				$db->rollback();
				$db_cmn->rollback();
				return 'error_500';
			}
			
			$db->commit();
			$db_cmn->commit();
		}
		
		// アイテム所持情報の取得
		// 更新直後のため、マスターから取得
		$list = $item_m->getUserItemList( $pp_id, "db" );
		
		if ( Ethna::isError( $list ) ) {
			return 'error_500';
		}
		
		// 整形
		$user_item = array();
		foreach ( $list as $row ) {
			$user_item[] = array(
				"item_id"	=> $row['item_id'],
				"item_num"	=> $row['num'],
			);
		}
		
		$this->af->setApp( "user_item", $user_item, true );
		$this->af->setApp( "modify_purchase", array( "ma_purchased" => $user['ma_purchase'] + $this->m_sell['price'] ), true );
		
		return 'api_json_encrypt';
	}
}
